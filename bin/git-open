#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Open project web page for branch tracking remote, or for specified remote.

GITSMART_MYST_REMOTE_HIERARCHY="${GITSMART_MYST_REMOTE_HIERARCHY:-proving release starter myclone origin upstream}"

os_is_macos () {
  [ "$(uname)" = "Darwin" ]
}

git_tracking_branch_remote () {
  git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null | /usr/bin/env sed -e 's#/.*$##'
}

git_open () {
  local remote="${1}"
  [ -z "${remote}" ] && remote="$(git_tracking_branch_remote)"
  if [ -z "${remote}" ] || ! git remote get-url ${remote} &> /dev/null; then
    for try_remote in ${GITSMART_MYST_REMOTE_HIERARCHY}; do
      if git remote get-url ${try_remote} &> /dev/null; then
        remote="${try_remote}"
        break
      fi
    done
  fi
  if [ -z "${remote}" ] || ! git remote get-url ${remote} &> /dev/null; then
    >&2 echo 'ERROR: Unable to deduce remote; please specify.'
    exit 1
  fi

  # Replace `-e` rules:
  # - For ~/.ssh/config SSH aliases, e.g.,
  #   git@github_username:username/project.git â†’ https://username/project
  # - For default SSH alias:
  #   ssh://git@github.com:username/project.git â†’ https://username/project
  #   git@github.com:username/project.git â†’ https://username/project
  #   git://github.com:username/project.git â†’ https://username/project
  #   ssh://github.com:username/project.git â†’ https://username/project
  local projurl=$( \
    git remote get-url ${remote} \
    | sed -E \
      -e 's#git@github_[^:]+:#git@github.com:#' \
      -e 's#(ssh://git@|git@|git://|ssh://)#https://#' \
      -e 's#com:#com/#' \
      -e 's#\.git$##' \
    | head -n1 2> /dev/null \
  )

  # NOTE: See also the sensible-open command,
  #         https://github.com/landonb/sensible-open
  #       which we wouldn't need unless we wanted to
  #       support --incognito aka --private. (That is,
  #       the --new-window argument is supported by
  #       both Chrome and Firefox.)

  # NOTE: Using `&` to not block if browser not already running.
  # Suppress: "Opening in existing browser session."
  if ! os_is_macos; then
    # 2020-09-01: Default was to open in tab of existing window:
    #   sensible-browser "${projurl}" > /dev/null &
    # but I find that a new window is generally what I want.
    # - For one, new window will always show up in mate-panel at the
    #   end of the window list (predictably) rather than activating
    #   an existing mate-panel entry (at an unpredictable position).
    # - For two, maybe your last used window has a ton of tabs open,
    #   and you had some specific tab active, and you don't want to
    #   lose your place by opening a new tab at the end of the list.
    sensible-browser --new-window "${projurl}" > /dev/null &
  else
    # Open in tab of existing window:
    #   open "${projurl}" > /dev/null &
    # Open in tab in new window (must specify application):
    #   open -na 'Google Chrome' --args --new-window "${projurl}" > /dev/null &
    if type -t sensible-open > /dev/null; then
      # https://github.com/landonb/sh-sensible-open
      # MEH/2021-01-28: Include copy of sensible-open under (new) deps/.
      sensible-open "${projurl}"
    else
      # Fallback to opening in tab of existing window (alternative
      # would be to just use Chrome... or to add `sensible-open`
      # under a new `deps/` directory and package with git-smart).
      open "${projurl}" > /dev/null &
    fi
  fi
}

main () {
  git_open "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

