#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Returns the PR # if embedded in the branch name,
# per conventional branch naming used by git-smart.

# USAGE: `git pr-from-branch`

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# - The convention name of a review branch indicating the PR #.
# - Used in a sed command, e.g.,
#     echo 'review-123--br-name--authname-2021-11-12-1' \
#       | sed -E 's/^review-([[:digit:]]+)--.*/\1/'
_GS_BR_REVIEW_RE_PR_NUMBER="${_GS_BR_REVIEW_RE_PR_NUMBER:-s/^review-([[:digit:]]+)--.*/\\1/}"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_pr_number_from_branch_name () {
  local pr_number=""

  local branch_name="$(git_branch_name)"
  local possible_match=$(echo "${branch_name}" | sed -E ${_GS_BR_REVIEW_RE_PR_NUMBER})

  [ "${possible_match}" != "${branch_name}" ] && pr_number="${possible_match}"

  echo "${pr_number}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME: NOT_DRY: Common git-smart functions, in lieu of assuming
# they're defined in the current environment or wiring dependencies.

git_branch_name () {
  git rev-parse --abbrev-ref=loose HEAD 2> /dev/null
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_pr_number_from_branch_name "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

