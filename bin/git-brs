#!/bin/bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-FlU#ðŸŒ¡
# License: MIT. Please find more in the LICENSE file.

GITFLU_MYST_BRANCH_HIERARCHY="${GITFLU_MYST_BRANCH_HIERARCHY:-master develop}"

GITFLU_MYST_REMOTE_HIERARCHY="${GITFLU_MYST_REMOTE_HIERARCHY:-origin upstream}"

git_brs_filter_remotes () {
  local filter
  local remote
  for remote in ${GITFLU_MYST_REMOTE_HIERARCHY}; do
    filter="${filter}remotes/${remote}|"
  done
  filter="${filter}^..(?!remotes/)"
  echo "${filter}"
}

git-brs () {
  # GREP_COLORS default: ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36
  #                      and rv and ne absent.
  # GREP_COLOR is deprecated, kinda like mt, ms, and mc.

  # Select Graphic Rendition (SGR) readability helpers.
  sgr_norm () { printf '00'; }
  sgr_bold () { printf '01'; }

  fg_black () { printf '30'; }
  fg_red () { printf '31'; }
  fg_green () { printf '32'; }
  fg_yellow () { printf '33'; }
  fg_blue () { printf '34'; }
  fg_magenta () { printf '35'; }
  fg_cyan () { printf '36'; }
  fg_white () { printf '37'; }

  bg_black () { printf '40'; }
  bg_red () { printf '41'; }
  bg_green () { printf '42'; }
  bg_yellow () { printf '43'; }
  bg_blue () { printf '44'; }
  bg_magenta () { printf '45'; }
  bg_cyan () { printf '46'; }
  bg_white () { printf '47'; }

  printg () { echo "$1" | GREP_COLORS="mt=$2" grep --color=always -P "$3"; }

  # Use -a/--all to include remote-tracking branches. Add -v includes sha1 and
  # commit subject line, and relationship to upstream branch. Make double -vv
  # to also print the name of the upstream branch.
  # E.g.:
  #   $ git branch --all
  #   master
  #   $ git branch --all -v
  #   master        d2a885d [behind 67] Foo: bar.
  #   $ git branch --all -vv
  #   master        d2a885d [origin/master: behind 67] Foo: bar.

  local all_annotate="$(git --no-pager branch -avv)"
  local filter_remotes="$(git_brs_filter_remotes)"
  local important_brs="$(echo "${all_annotate}" | grep -P "${filter_remotes}")"

  local high="${important_brs}"
  # Start by matching everything.
  high="$(printg "${high}" "$(sgr_norm);$(fg_white)" '\[[^]]+\]|$')"

  # SHA column match (second column, after branch name, before HEAD message).
  high="$(printg "${high}" "$(sgr_bold);$(fg_black)" ' [a-f0-9]{8} |$')"
  # Branch name column match (first column).
  high="$(printg "${high}" "$(sgr_bold);$(fg_magenta)" '^. [^[:space:]]*|$')"
  # Feature branches.
  high="$(printg "${high}" "$(sgr_bold);$(fg_yellow)" '[[:space:]]+feature/([^] :])*|$')"
  # WIP branches.
  high="$(printg "${high}" "$(sgr_bold);$(fg_green)" '[[:space:]]+wip/([^] :])*|$')"
  # Alpha branches.
  # high="$(printg "${high}" "$(sgr_norm);$(bg_blue);$(fg_white)" '[[:space:]]+a(lpha)?[-0-9]+/?([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_norm);$(bg_blue);$(fg_white)" '(?<=[[:space:]])a(lpha)?[-0-9]+/?([^] :])*|$')"

  # FIXME/2020-03-24: Add colors to GITFLU_MYST_REMOTE_HIERARCHY and iterate rather than hardcoding remotes.
  high="$(printg "${high}" "$(sgr_bold);$(fg_white);$(bg_cyan)" 'remotes/origin/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_black);$(bg_white)" 'remotes/upstream/([^] :])*|$')"

  local progenitor_filter
  for branch in ${GITFLU_MYST_BRANCH_HIERARCHY}; do
    progenitor_filter="${progenitor_filter}[[:space:]]+${branch}|"
  done
  progenitor_filter="${progenitor_filter}\$"
  # Now, e.g., progenitor_filter='[[:space:]]+develop|[[:space:]]+master|$'
  high="$(printg "${high}" "$(sgr_bold);$(fg_cyan)" "${progenitor_filter}")"

  echo "${high}"
}

main () {
  git-brs
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

